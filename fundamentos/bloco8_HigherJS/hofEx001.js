// Parte I
// Nova pessoa contratada

// VocÃª ficou responsÃ¡vel por organizar o sistema de contrataÃ§Ã£o de uma empresa e deve criar uma estrutura de dados que possua o formato { nomeCompleto, email } para representar a nova pessoa contratada. AlÃ©m disso, vocÃª deve gerar os emails de cada pessoa que Ã© contratada na empresa. Para isso:

    // crie uma funÃ§Ã£o que receba como parÃ¢metro o nome completo da nova pessoa colaboradora e que automaticamente gere um email no formato nome_da_pessoa@trybe.com;

    // utilize a funÃ§Ã£o newEmployees, definida abaixo, para receber a sua funÃ§Ã£o como parÃ¢metro e criar o objeto de cada pessoa contratada.

    // Nome: Pedro Guerra -> Chame sua funÃ§Ã£o passando o nome Pedro Guerra como parÃ¢metro, substituindo as aspas
    // Nome: Luiza Drumond -> Chame sua funÃ§Ã£o passando o nome Luiza Drumond como parÃ¢metro, substituindo as aspas
    // Nome: Carla Paiva -> Chame sua funÃ§Ã£o passando o nome Carla Paiva como parÃ¢metro, substituindo as aspas

const employeeGenerator = (fullname) => {
  const email = fullname.toLowerCase().replace(' ', '_');
  return { fullname, email: `${email}@trybe.com` };
};

const newEmployees = (callback) => {
  const employees = {
    id1: callback('Pedro Guerra'), 
    // Nome: Pedro Guerra -> Chame sua funÃ§Ã£o passando o nome Pedro Guerra como parÃ¢metro
    id2: callback('Luiza Drumond'), 
    // Nome: Luiza Drumond -> Chame sua funÃ§Ã£o passando o nome Luiza Drumond como parÃ¢metros 
    id3: callback('Carla Paiva')
    // Nome: Carla Paiva -> Chame sua funÃ§Ã£o passando o nome Carla Paiva como parÃ¢metro
  }
  return employees;
};

console.log(newEmployees(employeeGenerator));

//  ==================================================================

//SOLUÃ‡ÃƒO PASSO A PASSO PARA COMPARAR COM A RESPOSTA

// 1Âº passo: crie a funÃ§Ã£o que recebe o nome e gera o email da pessoa contratada.
    // Ao criar a funÃ§Ã£o, vocÃª deve passar o nome completo por parÃ¢metro e retornar um objeto que vai receber o nome completo e o email.


// 2Âº passo: desenvolva a lÃ³gica do email.
    // O email vai ser gerado a partir do nome passado por parÃ¢metro.
    // Ao criar um email, Ã© importante deixÃ¡-lo padronizado com letras minÃºsculas e utilizar o underline(_) para separar o nome da pessoa. Para isso:
    // utilize a funÃ§Ã£o toLowerCase() para deixar as letras minÃºsculas.
    // separe o nome utilizando o underline (_): >>>>>>>> (replace(' ', '_')) <<<<<<<<<
    // OPÃ‡ÃƒO: O nome vem separado por espaÃ§os; vocÃª pode utilizar o replace para substituir os espaÃ§os por _.
    //  ðŸ”Ž: O replace nÃ£o Ã© a Ãºnica maneira de substituir valores em uma string. VocÃª pode utilizar outros mÃ©todos, como o split e o join, etc. >>>>>>>> .split(' ').join('_')  <<<<<<<<<<   numa linha sÃ³, depois do lower case
    //retorne o email utilizando template literals.


// Terceiro passo: passe a funÃ§Ã£o como parÃ¢metro para cada id dentro de newEmployees.
    // Para finalizar a sua lÃ³gica, basta passar a funÃ§Ã£o que vocÃª criou como parÃ¢metro de newEmployees.



