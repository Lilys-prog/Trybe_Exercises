Introdução

O que vamos aprender?
Hoje você vai conhecer as HOFs Array.sort e Array.map. Essas funções são bastante poderosas, podendo facilitar muito a manipulação e criação de arrays, resultando em um código mais legível, conciso e expressivo.

Você será capaz de:
   - Utilizar a função Array.sort para ordenar arrays de acordo com algum critério;

   - Utilizar a função Array.map para manipular e construir arrays.


// =================================================================================
// =================================================================================


Relembrando o que são Higher Order Functions

As Higher Order Functions são funções que recebem outra função como parâmetro, ou que retornam uma função.

Hoje você vai aprender mais duas HOFs: o map, que itera pelo array e permite criar um novo array com modificações em cada um dos elementos do array original, e o sort, que ordena arrays de acordo com algum critério.


// =================================================================================
// =================================================================================


Array.sort

EXEMPLO PRÁTICO
A empresa em que você trabalha recebeu um projeto de uma rede de mercados e você ficou responsável por criar o >>>>>>>>>> sistema de saída de produtos <<<<<<<<<<<. A gerência do mercado pediu que os produtos fossem organizados por ordem alfabética.

A lista de produtos que precisam ser ordenados está salva no array food:

                    const food = ['arroz', 'feijão', 'farofa', 'chocolate', 'doce de leite'];

Após pesquisar algumas soluções, você encontrou a função sort, que permite ordenar um array, e criou o código abaixo:

                    const food = ['arroz', 'feijão', 'farofa', 'chocolate', 'doce de leite'];
                    food.sort();
                    console.log(food);

                    // [ 'arroz', 'chocolate', 'doce de leite', 'farofa', 'feijão' ]

Funcionou bem com um array de strings, não é mesmo? Portanto, caso queira ordenar de forma alfabética, basta chamar sort, sem parâmetros algum na função.

// -------------

EXEMPLO COM NÚMEROS

                    const inventory = [1, 3, 2, 5, 4, 6, 7, 8, 9, 10];
                    inventory.sort();
                    console.log(inventory); 
                    
                    // [1, 10, 2, 3, 4, 5, 6, 7, 8, 9]

O que aconteceu com esta ordenação?

Ao trabalhar com strings e utilizar o sort sem nenhum parâmetro, ele entende que é para ordenar por ordem alfabética. Nesse caso, quando há elementos como números, o sort converte para string e realiza a comparação de acordo com a tabela de caracteres unicode (universal character encoding standard) e, nela, o computador entende que o número 10, número 1 seguido do número 0, vem antes do número 2.

Para resolver o problema da ordenação, o .sort() pode receber como parâmetro uma função de comparação.

                    const inventory = [1, 3, 2, 5, 4, 6, 7, 8, 9, 10];
                    inventory.sort((a, b) => a - b);
                    console.log(inventory); 

                    // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

A lógica é a seguinte: a função sort recebe todos os elementos do array e realiza a comparação de cada um deles em pares (elemento1, elemento2). Se a operação elemento1 - elemento2 der resultado negativo, o elemento1 vai para trás. Caso contrário, vai para frente.

Se você precisar utilizar a forma decrescente, basta inverter a operação elemento1 - elemento2 por elemento2 - elemento1:

                    const inventory = [1, 3, 2, 5, 4, 6, 7, 8, 9, 10];
                    // troca a operação para b - a
                    inventory.sort((a, b) => b - a);
                    console.log(inventory); 
                    
                    // [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

(vídeo do Noel explicando tudo o que há por trás dessa conta)

// -------------

EXEMPLO COM OBJETOS (utilizando o sort() com um array de objetos)
(vídeo com o NOEL)
exemplodia2.js

Depois disso, alguns exercícios no vsc.


// =================================================================================
// =================================================================================

Array.map

A função map possui a mesma estrutura que o forEach, o que muda é o seu retorno.
(vídeo - Entendendo o .map()) => pelo Noel

Percorre todos os elementos de um array e retorna um array novo >>>>>>>>>> com o mesmo número de elementos do array original <<<<<<<<<< com as modificações que forem feitas aos elementos.

EXEMPLO PRÁTICO (no vsc)

O map pode receber até 3 parâmetros, mas só o priimmeiro é obrigatório, que é cada elemento do array que se vai usar, na formma de elemento, para que a hof passe por cada um.
O outro parâmetro pode ser o índice e o último pode ser o próprio array original inteiro, sem ser por elemento.
(da mesma forma que no forEach)


// =================================================================================
// =================================================================================
Obs: o objetivo a partir daqui é usar cada vez menos o 'for', inclusive o forEach, através das novas ferramentas
// =================================================================================
// =================================================================================


O map permite realizar cálculos, tarefas e alterar elementos sem que se precise alterar o array original. No caso abaixo, cria-se um novo array de números negativos, sem que o array de partida mude:

                        const numbers = [1, 2, 3, 4, -5];

                        const negativeNumbers = numbers.map((number) => ((number > 0) ? number * (-1) : number));

                        console.log(negativeNumbers); // [ -1, -2, -3, -4, -5 ]
                        console.log(numbers); // [ 1, 2, 3, 4, -5 ]


Utilizando o 'for' haveriam mais linhas de código:


                        const numbers = [1, 2, 3, 4, -5];

                        const negativeNumbers = [];
                        for (let index = 0; index < numbers.length; index += 1) {
                        if (numbers[index] > 0) {
                           negativeNumbers.push(numbers[index] * -1);
                        } else {
                           negativeNumbers.push(numbers[index]);
                        }
                        }

                        console.log(negativeNumbers); // [ -1, -2, -3, -4, -5 ]
                        console.log(numbers); // [ 1, 2, 3, 4, -5 ]


O map, assim como o forEach, otimiza o código, tornado-o mais limpo e legível, além de ocupar menos espaço e usar uma lógica mais direta.

=================================================================

Outra forma de usar o .map() é unir dois arrays para criar um novo.

Considere que você possui duas listas: o preço do primeiro produto (Arroz) é o primeiro elemento da lista prices (2.99), e assim por diante:

                        const products = ['Arroz', 'Feijão', 'Alface', 'Tomate'];
                        const prices = [2.99, 3.99, 1.5, 2];

Deseja-se juntá-las em apenas uma lista de objetos que fique da seguinte forma:

const listProducts = [{ Arroz: 2.99 },...]    // array de objetos
(FIZ NO JS TB, PRA VER FUNCIONANDO)


                        const products = ['Arroz', 'Feijão', 'Alface', 'Tomate'];
                        const prices = [2.99, 3.99, 1.5, 2];

                        const updateProducts = (listProducts, listPrices) => listProducts.map((product, index) => (
                        { [product]: listPrices[index] }
                        ));

                        const listProducts = updateProducts(products, prices);
                        console.log(listProducts);



E, antes de seguir em diante, talvez você tenha se perguntado: Qual a diferença, afinal, de map para o forEach?

As principais diferenças são:

O map aplica sobre os elementos de um array uma função e retorna um array novo, sem modificar o original;

O forEach não tem retorno, ele é genérico e pode fazer diversas coisas, como executar uma função para cada elemento do array, modificar o array, atribuir valores a variáveis ou objetos, etc.

                     ====================================================
                     EXEMPLO PARA MOSTRAR A DIFERENÇA ENTRE forEach E map

                     const numeros = [1, 2, 3, 4, 5, 6];
                     console.log(numeros.map((numero) => numero * 2)); // Retorno: [2, 4, 6, 8, 10, 12]
-------------------------
                     const paresMenoresQueCinco = [];
                     numeros.forEach((numero) => {
                     if (numero < 5 && numero % 2 === 0) {
                        paresMenoresQueCinco.push(numero);
                     }
                     });
                     console.log(paresMenoresQueCinco); // Retorno: [2, 4]

Pense sempre que o forEach faz com arrays o que as outras HOFs não conseguem fazer. Ele é genérico!


// =================================================================================
// =================================================================================

(EXERCÍCIO MAPEHOFS NO vsc)


// =================================================================================
// =================================================================================

EXERCÍCIOS, AGORA A PRÁTICA


