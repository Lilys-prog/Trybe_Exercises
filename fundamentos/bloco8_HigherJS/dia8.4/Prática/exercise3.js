// InstruÃ§Ãµes para a realizaÃ§Ã£o dos exercÃ­cios
// Todos os exercÃ­cios contÃªm um cÃ³digo-base. VocÃª deverÃ¡ copiar esse cÃ³digo e salvÃ¡-lo em um arquivo nomeado conforme o nÃºmero do exercÃ­cio. Por exemplo, o exercÃ­cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.

// ðŸš€ Se liga nesse foguete!

// Os exercÃ­cios destacados com ðŸš€ sÃ£o os fundamentais pra vocÃª ir bem no projeto! Todos os exercÃ­cios vÃ£o contribuir com sua formaÃ§Ã£o, mas fique de olho nesses! ðŸ‘€

// =================

// ExercÃ­cio 3
  // Escreva a funÃ§Ã£o personLikes, que recebe como parÃ¢metro os objetos alex ou gunnar. Cada objeto representa uma pessoa, e a funÃ§Ã£o deve retornar todos os gostos daquela pessoa, conforme mostrado abaixo:

// name: nome da pessoa, age: idade, likes: gosta de, nationality: nacionalidade

const alex = {
  name: 'Alex',
  age: 26,
  likes: ['fly fishing'],
  nationality: 'Australian',
};

const gunnar = {
  name: 'Gunnar',
  age: 30,
  likes: ['hiking', 'scuba diving', 'taking pictures'],
  nationality: 'Icelandic',
};

// complete a assinatura da funÃ§Ã£o abaixo
const personLikes = (person) => `${name} is ${age} years old and likes ${likes.join(', ')}.`;
// <nome> tem <anos de idade> e gosta de <gostos da pessoa>


// Retornos esperados:
const destAlex = {name, age, likes, nationality} = alex;
console.log(personLikes(alex)); 
// 'Alex is 26 years old and likes fly fishing.'

const destGunnar = {name, age, likes: [...likes], nationality} = gunnar;
console.log(personLikes(gunnar)); 
// 'Gunnar is 30 years old and likes hiking, scuba diving, taking pictures.'