PAR√ÇMETRO REST (aula 8.4 - parte 2/3)
  Agora que voc√™ viu como funciona o spread operator, vamos aprender mais um recurso que ir√° te auxiliar a criar fun√ß√µes que recebem um n√∫mero >>> ILIMITADO <<< de argumentos: o PAR√ÇMETRO REST.
O par√¢metro rest √© uma feature do ES6 que permite que voc√™ agrupe informa√ß√µes em um lugar s√≥, mas neste caso, ser√° aplicado nos par√¢metros dentro da fun√ß√£o.

Por exemplo, ao trabalhar com fun√ß√µes, voc√™ pode se deparar com a necessidade de inserir m√∫ltiplos par√¢metros para executar um determinado c√≥digo. Ao utilizar o rest, voc√™ consegue agrupar esses argumentos usando a sintaxe de tr√™s pontos(...). Observe e execute o c√≥digo abaixo:

                                  const countParams = (...args) => {                // n√∫mero indeterminado de par√¢metros
                                    console.log('par√¢metros:', args);
                                    return `Voc√™ passou ${args.length} par√¢metros para a fun√ß√£o.`;
                                  }

                                  console.log(countParams(0, 1, 2)); 
                                  // aquii vc passou 3 par√¢metros para a fun√ß√£o.

                                  console.log(countParams('string', null, [1, 2, 3], { }));         // par√¢metros de tipos diferentes
                                  // aqui vc passou 4 par√¢metros para a fun√ß√£o.



EXEMPLO
Agora que voc√™ j√° conhece a sintaxe do rest, imagine que voc√™ precisa criar uma fun√ß√£o que √© respons√°vel por somar a quantidade de produtos de um carrinho de compras. Essa fun√ß√£o pode receber v√°rios n√∫meros como par√¢metros e deve realizar a soma de todos eles (vc n√£o sabe quantas coisas a pessoa vai comprar). Observe e execute o c√≥digo abaixo:

                                  const sum = (...args) => args.reduce((accumulator, current) => accumulator + current, 0);
                                  console.log(sum(4, 7, 8, 9, 60)); 
                                  // 88

No exemplo acima, a fun√ß√£o sum utiliza a HOF reduce para calcular a soma de todos os argumentos passados a ela, independentemente do n√∫mero. Como o par√¢metro rest ‚Äúempacota‚Äù todos os argumentos em um array, podemos utilizar o reduce para somar tudo o que estiver dentro desse array. Independentemente do n√∫mero de argumentos passados, a fun√ß√£o ir√° executar a soma. Ao utilizar o rest, suas fun√ß√µes podem ficar mais flex√≠veis quando voc√™ precisa passar m√∫ltiplos par√¢metros, pois n√£o precisa especificar quantos argumentos a fun√ß√£o ir√° receber!

SPREAD E REST üìù: O spread √© respons√°vel por espalhar valores, e ele pode ser utilizado para passar par√¢metros ao >>> EXECUTAR uma fun√ß√£o. J√° o rest pode ser utilizado para agrupar valores ao >>> DECLARAR fun√ß√µes que podem receber m√∫ltiplos par√¢metros.







