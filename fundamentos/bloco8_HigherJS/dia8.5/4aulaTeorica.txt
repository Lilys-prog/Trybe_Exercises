DEFAULT PARAMETERS

Vamos entender o que é o parâmetro default. Imagine que você queira executar a função greeting abaixo, que imprime uma saudação para a pessoa usuária. O que acontece quando você chama a função sem passar o argumento que ela espera? Faça esse teste com o exemplo no seu editor de códigos!

                            const greeting = (user) => console.log(`Welcome ${user}!`);

                            greeting(); 
                            // Welcome undefined!

Você verá que a função retornará undefined. Você consegue pensar em uma forma de corrigir esse problema? Afinal, podemos esquecer de chamar a função com o nome da pessoa usuária. Uma solução seria:

                            const greeting = (user) => {
                              const userDisplay = typeof user === 'undefined' ? 'pessoa usuária' : user;
                              console.log(`Welcome ${userDisplay}!`);
                            };

                            greeting(); 
                            // Welcome pessoa usuária!

Essa solução não parece muito elegante, não é mesmo? Afinal, precisamos incluir uma linha para checar se o parâmetro é indefinido. Se sim, definimos que user será 'pessoa usuária'. Caso contrário, a função irá imprimir a mensagem com o nome da pessoa usuária passado como argumento.


Com o ES6, podemos pré-definir um parâmetro padrão para a função. Assim, podemos reescrever o exemplo anterior da seguinte forma:

                            const greeting = (user = 'pessoa usuária') => console.log(`Welcome ${user}!`);

                            greeting(); 
                            // Welcome pessoa usuária!

Simples assim! Passar um parâmetro como default é um pequeno detalhe que torna o seu código muito mais semântico. Assim, o default será utilizado caso nenhum argumento seja fornecido à função. Você pode adicionar mais de um parâmetro default, caso sua função receba vários argumentos, se achar necessário.

(exercício de fixação)